#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando configura√ß√£o do Gestor de Abaixo-Assinado...\n');

let allGood = true;

// Verificar arquivo .env.local
const envPath = path.join(__dirname, '.env.local');
if (fs.existsSync(envPath)) {
  console.log('‚úÖ Arquivo .env.local encontrado');
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  if (envContent.includes('VITE_SUPABASE_URL') && envContent.includes('VITE_SUPABASE_ANON_KEY')) {
    console.log('‚úÖ Vari√°veis de ambiente configuradas');
  } else {
    console.log('‚ùå Vari√°veis de ambiente incompletas');
    allGood = false;
  }
} else {
  console.log('‚ùå Arquivo .env.local n√£o encontrado');
  allGood = false;
}

// Verificar arquivos de migra√ß√£o
const migrationsDir = path.join(__dirname, 'supabase', 'migrations');
if (fs.existsSync(migrationsDir)) {
  console.log('‚úÖ Diret√≥rio de migra√ß√µes encontrado');
  
  const migrations = [
    '20250915132944_twilight_sea.sql',
    '20250917051108_broken_resonance.sql',
    '20250917051357_broad_frost.sql',
    '20250120000000_add_image_url.sql',
    '20250120000001_create_logs_tables.sql'
  ];
  
  migrations.forEach(migration => {
    const migrationPath = path.join(migrationsDir, migration);
    if (fs.existsSync(migrationPath)) {
      console.log(`‚úÖ Migra√ß√£o ${migration} encontrada`);
    } else {
      console.log(`‚ùå Migra√ß√£o ${migration} n√£o encontrada`);
      allGood = false;
    }
  });
} else {
  console.log('‚ùå Diret√≥rio de migra√ß√µes n√£o encontrado');
  allGood = false;
}

// Verificar package.json
const packagePath = path.join(__dirname, 'package.json');
if (fs.existsSync(packagePath)) {
  console.log('‚úÖ package.json encontrado');
  
  const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  const requiredDeps = ['react', 'react-dom', '@supabase/supabase-js', 'react-router-dom'];
  
  requiredDeps.forEach(dep => {
    if (packageContent.dependencies && packageContent.dependencies[dep]) {
      console.log(`‚úÖ Depend√™ncia ${dep} encontrada`);
    } else {
      console.log(`‚ùå Depend√™ncia ${dep} n√£o encontrada`);
      allGood = false;
    }
  });
} else {
  console.log('‚ùå package.json n√£o encontrado');
  allGood = false;
}

// Verificar node_modules
const nodeModulesPath = path.join(__dirname, 'node_modules');
if (fs.existsSync(nodeModulesPath)) {
  console.log('‚úÖ node_modules encontrado');
} else {
  console.log('‚ùå node_modules n√£o encontrado - execute: npm install');
  allGood = false;
}

console.log('\n' + '='.repeat(50));

if (allGood) {
  console.log('üéâ Configura√ß√£o completa! Tudo pronto para usar.');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Execute as migra√ß√µes no painel do Supabase');
  console.log('2. Configure o bucket de storage "petition-images"');
  console.log('3. Crie um usu√°rio administrador');
  console.log('4. Execute: npm run dev');
} else {
  console.log('‚ö†Ô∏è  Configura√ß√£o incompleta. Verifique os itens marcados com ‚ùå');
  console.log('\nüîß Para corrigir:');
  console.log('1. Execute: npm install');
  console.log('2. Execute: node setup-supabase.js');
  console.log('3. Siga as instru√ß√µes em INSTRUCOES_SUPABASE.md');
}

console.log('\nüîó Links √∫teis:');
console.log('- Painel Supabase: https://rncowiwstzumxruaojvq.supabase.co');
console.log('- SQL Editor: https://rncowiwstzumxruaojvq.supabase.co/project/default/sql');
console.log('- Storage: https://rncowiwstzumxruaojvq.supabase.co/project/default/storage');
console.log('- Auth: https://rncowiwstzumxruaojvq.supabase.co/project/default/auth');
